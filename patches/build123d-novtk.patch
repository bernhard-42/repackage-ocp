diff --git a/pyproject.toml b/pyproject.toml
index 6ef699d..32e4bc3 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -16,7 +16,7 @@ authors = [
 ]
 description = "A python CAD programming library"
 readme = "README.md"
-requires-python = ">= 3.10, < 3.13"
+requires-python = ">= 3.10, < 3.14"
 keywords = [
     "3d models",
     "3d printing",
@@ -35,7 +35,7 @@ classifiers = [
 ]
 
 dependencies = [
-    "cadquery-ocp >= 7.7.0",
+    "cadquery-ocp >= 7.8.1",
     "typing_extensions >= 4.6.0, <5",
     "numpy >= 2, <3",
     "svgpathtools >= 1.5.1, <2",
diff --git a/src/build123d/exporters.py b/src/build123d/exporters.py
index b869ac5..1aad514 100644
--- a/src/build123d/exporters.py
+++ b/src/build123d/exporters.py
@@ -759,8 +759,20 @@ class ExportDXF(Export2D):
         spline.Transform(t)
 
         order = spline.Degree() + 1
-        knots = list(spline.KnotSequence())
-        poles = [self._convert_point(p) for p in spline.Poles()]
+
+        # knots = list(spline.KnotSequence())
+        knots = []
+        for i in range(1, spline.NbKnots() + 1):
+            knot = spline.Knot(i)
+            for j in range(spline.Multiplicity(i)):
+                knots.append(knot)
+
+        # poles = [(p.X(), p.Y(), p.Z()) for p in spline.Poles()]
+        poles = []
+        for i in range(1, spline.NbPoles() + 1):
+            p = spline.Pole(i)
+            poles.append((p.X(), p.Y(), p.Z()))
+
         weights = (
             [spline.Weight(i) for i in range(1, spline.NbPoles() + 1)]
             if spline.IsRational()
@@ -1293,7 +1305,12 @@ class ExportSVG(Export2D):
         )
 
         def make_segment(bezier: Geom_BezierCurve, reverse: bool) -> PathSegment:
-            p = [self._path_point(p) for p in bezier.Poles()]
+
+            # p = [self._path_point(p) for p in bezier.Poles()]
+            p = []
+            for i in range(1, bezier.NbPoles() + 1):
+                p.append(self._path_point(bezier.Pole(i)))
+                
             if reverse:
                 p.reverse()
             if len(p) == 2:
diff --git a/src/build123d/topology.py b/src/build123d/topology.py
index 5986e08..ec9c586 100644
--- a/src/build123d/topology.py
+++ b/src/build123d/topology.py
@@ -9612,7 +9612,7 @@ def _topods_entities(shape: TopoDS_Shape, topo_type: Shapes) -> list[TopoDS_Shap
 
     while explorer.More():
         item = explorer.Current()
-        out[item.HashCode(HASH_CODE_MAX)] = (
+        out[hash(item)] = (
             item  # needed to avoid pseudo-duplicate entities
         )
         explorer.Next()
diff --git a/tests/test_direct_api.py b/tests/test_direct_api.py
index bc17a35..5ba3140 100644
--- a/tests/test_direct_api.py
+++ b/tests/test_direct_api.py
@@ -35,9 +35,6 @@ from OCP.gp import (
 from OCP.GProp import GProp_GProps
 from OCP.ShapeUpgrade import ShapeUpgrade_UnifySameDomain  # Correct import
 
-from vtkmodules.vtkCommonDataModel import vtkPolyData
-from vtkmodules.vtkFiltersCore import vtkPolyDataNormals, vtkTriangleFilter
-
 from build123d.build_common import GridLocations, Locations, PolarLocations
 from build123d.build_enums import (
     Align,
@@ -64,7 +61,6 @@ from build123d.objects_part import Box, Cylinder
 from build123d.objects_curve import CenterArc, EllipticalCenterArc, JernArc, Polyline
 from build123d.build_sketch import BuildSketch
 from build123d.build_line import BuildLine
-from build123d.jupyter_tools import to_vtkpoly_string
 from build123d.objects_curve import Spline
 from build123d.objects_sketch import Circle, Rectangle, RegularPolygon
 from build123d.geometry import (
@@ -1709,26 +1705,6 @@ class TestImportExport(DirectApiTestCase):
         self.assertVectorAlmostEquals(stl_box.position, (0, 0, 0), 5)
 
 
-class TestJupyter(DirectApiTestCase):
-    def test_repr_javascript(self):
-        shape = Solid.make_box(1, 1, 1)
-
-        # Test no exception on rendering to js
-        js1 = shape._repr_javascript_()
-
-        assert "function render" in js1
-
-    def test_display_error(self):
-        with self.assertRaises(AttributeError):
-            display(Vector())
-
-        with self.assertRaises(ValueError):
-            to_vtkpoly_string("invalid")
-
-        with self.assertRaises(ValueError):
-            display("invalid")
-
-
 class TestLocation(DirectApiTestCase):
     def test_location(self):
         loc0 = Location()
@@ -4605,56 +4581,6 @@ class TestVertex(DirectApiTestCase):
             Vertex(1, 2, 3) & Vertex(5, 6, 7)
 
 
-class TestVTKPolyData(unittest.TestCase):
-    def setUp(self):
-        # Create a simple test object (e.g., a cylinder)
-        self.object_under_test = Solid.make_cylinder(1, 2)
-
-    def test_to_vtk_poly_data(self):
-        # Generate VTK data
-        vtk_data = self.object_under_test.to_vtk_poly_data(
-            tolerance=0.1, angular_tolerance=0.2, normals=True
-        )
-
-        # Verify the result is of type vtkPolyData
-        self.assertIsInstance(vtk_data, vtkPolyData)
-
-        # Further verification can include:
-        # - Checking the number of points, polygons, or cells
-        self.assertGreater(
-            vtk_data.GetNumberOfPoints(), 0, "VTK data should have points."
-        )
-        self.assertGreater(
-            vtk_data.GetNumberOfCells(), 0, "VTK data should have cells."
-        )
-
-        # Optionally, compare the output with a known reference object
-        # (if available) by exporting or analyzing the VTK data
-        known_filter = vtkTriangleFilter()
-        known_filter.SetInputData(vtk_data)
-        known_filter.Update()
-        known_output = known_filter.GetOutput()
-
-        self.assertEqual(
-            vtk_data.GetNumberOfPoints(),
-            known_output.GetNumberOfPoints(),
-            "Number of points in VTK data does not match the expected output.",
-        )
-        self.assertEqual(
-            vtk_data.GetNumberOfCells(),
-            known_output.GetNumberOfCells(),
-            "Number of cells in VTK data does not match the expected output.",
-        )
-
-    def test_empty_shape(self):
-        # Test handling of empty shape
-        empty_object = Solid()  # Create an empty object
-        with self.assertRaises(ValueError) as context:
-            empty_object.to_vtk_poly_data()
-
-        self.assertEqual(str(context.exception), "Cannot convert an empty shape")
-
-
 class TestWire(DirectApiTestCase):
     def test_ellipse_arc(self):
         full_ellipse = Wire.make_ellipse(2, 1)
