diff --git a/pyproject.toml b/pyproject.toml
index 6ef699d..32e4bc3 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -16,7 +16,7 @@ authors = [
 ]
 description = "A python CAD programming library"
 readme = "README.md"
-requires-python = ">= 3.10, < 3.13"
+requires-python = ">= 3.10, < 3.14"
 keywords = [
     "3d models",
     "3d printing",
@@ -35,7 +35,7 @@ classifiers = [
 ]
 
 dependencies = [
-    "cadquery-ocp >= 7.7.0",
+    "cadquery-ocp >= 7.8.1",
     "typing_extensions >= 4.6.0, <5",
     "numpy >= 2, <3",
     "svgpathtools >= 1.5.1, <2",
diff --git a/src/build123d/exporters.py b/src/build123d/exporters.py
index b869ac5..1aad514 100644
--- a/src/build123d/exporters.py
+++ b/src/build123d/exporters.py
@@ -759,8 +759,20 @@ class ExportDXF(Export2D):
         spline.Transform(t)
 
         order = spline.Degree() + 1
-        knots = list(spline.KnotSequence())
-        poles = [self._convert_point(p) for p in spline.Poles()]
+
+        # knots = list(spline.KnotSequence())
+        knots = []
+        for i in range(1, spline.NbKnots() + 1):
+            knot = spline.Knot(i)
+            for j in range(spline.Multiplicity(i)):
+                knots.append(knot)
+
+        # poles = [(p.X(), p.Y(), p.Z()) for p in spline.Poles()]
+        poles = []
+        for i in range(1, spline.NbPoles() + 1):
+            p = spline.Pole(i)
+            poles.append((p.X(), p.Y(), p.Z()))
+
         weights = (
             [spline.Weight(i) for i in range(1, spline.NbPoles() + 1)]
             if spline.IsRational()
@@ -1293,7 +1305,12 @@ class ExportSVG(Export2D):
         )
 
         def make_segment(bezier: Geom_BezierCurve, reverse: bool) -> PathSegment:
-            p = [self._path_point(p) for p in bezier.Poles()]
+
+            # p = [self._path_point(p) for p in bezier.Poles()]
+            p = []
+            for i in range(1, bezier.NbPoles() + 1):
+                p.append(self._path_point(bezier.Pole(i)))
+                
             if reverse:
                 p.reverse()
             if len(p) == 2:
diff --git a/src/build123d/topology.py b/src/build123d/topology.py
index 5986e08..ec9c586 100644
--- a/src/build123d/topology.py
+++ b/src/build123d/topology.py
@@ -969,7 +965,7 @@ class Shape(NodeMixin, Generic[TOPODS]):
         """
         if self.wrapped is None:
             return 0
-        return self.wrapped.HashCode(HASH_CODE_MAX)
+        return hash(self)
 
     def is_null(self) -> bool:
         """Returns true if this shape is null. In other words, it references no
@@ -9612,7 +9612,7 @@ def _topods_entities(shape: TopoDS_Shape, topo_type: Shapes) -> list[TopoDS_Shap
 
     while explorer.More():
         item = explorer.Current()
-        out[item.HashCode(HASH_CODE_MAX)] = (
+        out[hash(item)] = (
             item  # needed to avoid pseudo-duplicate entities
         )
         explorer.Next()
