name: Build OCP with pypi VTK (v2)

on: workflow_dispatch

env:
  OCP: 7.8.1.0
  VTK: 9.3.1
  VTK_MAJOR: 9.3
  OCCT: 7.8.1
  PY313VTK_RUNID: 12559402061
  PYWRAP: true

jobs:
  # ========================================
  # Build SDKs
  # ========================================

  sdks:
    name: Build OCCT SDK for ${{ matrix.python-version }} on ${{ matrix.os }} with VTK ${{ matrix.use-vtk }}
    uses: ./.github/workflows/common-setup.yml
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04", "macos-13", "macos-14", "windows-2019"]
        python-version: ["3.11"]
        use-vtk: ["vtk", "novtk"]

        include:
          - os: "macos-13"
            vtk_libs: ".dylibs/libvtk*.dylib"
            vtk_suffix: "/"
            vtk_prefix: ""
            sed_i: "gsed -i"
            env: "MACOSX_DEPLOYMENT_TARGET=11.1"
            shells: "bash"
          - os: "macos-14"
            vtk_libs: ".dylibs/libvtk*.dylib"
            vtk_suffix: "/"
            vtk_prefix: ""
            sed_i: "gsed -i"
            env: "MACOSX_DEPLOYMENT_TARGET=11.1"
            shells: "bash"
          - os: "ubuntu-20.04"
            vtk_libs: "libvtk*.so"
            vtk_suffix: "/vtk-9.3/"
            vtk_prefix: ""
            sed_i: "sed -i"
            compilers: ""
            env: "DUMMY=0"
            shells: "bash"
          - os: "windows-2019"
            vtk_libs: "vtk*.dll"
            vtk_suffix: "/"
            vtk_prefix: "Library/"
            sed_i: "sed -i"
            shells: "bash cmd.exe"

    steps:
      # - - - - - - - - - - - - - - - - - - - - -
      #                Install VTK
      # - - - - - - - - - - - - - - - - - - - - -

      - name: Download wheel artifact
        if: matrix.python-version == '3.13' && matrix.use-vtk == 'vtk'
        uses: actions/download-artifact@v4
        with:
          name: cadquery-vtk-${{ matrix.os }}-cp${{ matrix.python-version }}
          github-token: ${{ secrets.GH_PAT }}
          run-id: ${{ env.PY313VTK_RUNID }}

      - name: (All) Install VTK ${{ env.VTK }} from pypi
        if: matrix.use-vtk == 'vtk'
        shell: bash -l {0}
        run: |
          if [[ ${{ matrix.python-version }} == "3.13" ]]; then
            # For Python 3.13, we need to install the VTK from the cadquery_vtk package
            # pip install cadquery_vtk==${{ env.VTK }}
            pip install cadquery_vtk*.whl
          else
            # For other Python versions up to Python 3.12, we can install the VTK from the vtk package
            pip install vtk==${{ env.VTK }}
          fi

      # - - - - - - - - - - - - - - - - - - - - -
      #                VTK SDK
      # - - - - - - - - - - - - - - - - - - - - -

      - name: (All) Restore VTK SDK cache
        if: matrix.use-vtk == 'vtk'
        id: cache-vtk-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/opt/local/vtk-${{ env.VTK }}
          key: VTK-${{ env.VTK }}-py${{ matrix.python-version }}-${{ matrix.os }}-

      - name: (All) Install VTK SDK include files
        if: matrix.use-vtk == 'vtk' && steps.cache-vtk-restore.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          set -euo pipefail

          # Create an environment with conda VTK to get the include files
          micromamba create -y -n vtk python=${{ matrix.python-version }}
          micromamba activate vtk
          micromamba install -y vtk=${{ env.VTK }}

          rm -fr ~/opt/local/vtk-${{ env.VTK }}
          mkdir -p ~/opt/local/vtk-${{ env.VTK }}/include
          mkdir -p ~/opt/local/vtk-${{ env.VTK }}/bin
          mkdir -p ~/opt/local/vtk-${{ env.VTK }}/lib
          mkdir -p ~/opt/local/vtk-${{ env.VTK }}/lib/cmake

          cp -r $CONDA_PREFIX/${{ matrix.vtk_prefix }}include/vtk-${{ env.VTK_MAJOR }}/ ~/opt/local/vtk-${{ env.VTK }}/include/
          cp cmake/vtk-config-${{ matrix.os }}.cmake ~/opt/local/vtk-${{ env.VTK }}/vtk-config.cmake
          micromamba deactivate

      - name: (Linux, Mac) Install VTK SDK libs
        if: matrix.use-vtk == 'vtk' && runner.os != 'Windows' && steps.cache-vtk-restore.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          set -euo pipefail

          micromamba activate build-ocp

          cp $CONDA_PREFIX/lib/python${{ matrix.python-version }}/site-packages/vtkmodules/${{ matrix.vtk_libs }} ~/opt/local/vtk-${{ env.VTK }}/lib/
          cp $CONDA_PREFIX/lib/python${{ matrix.python-version }}/site-packages/vtk.py ~/opt/local/vtk-${{ env.VTK }}
          cp -r $CONDA_PREFIX/lib/python${{ matrix.python-version }}/site-packages/vtkmodules ~/opt/local/vtk-${{ env.VTK }}

          if [[ "$RUNNER_OS" == "Linux" ]]; then
            # copy libXcursor and libXfixes to the VTK lib folder
            cp $CONDA_PREFIX/lib/python${{ matrix.python-version }}/site-packages/vtk.libs/* ~/opt/local/vtk-${{ env.VTK }}/lib/
          fi

      - name: (Windows) Install VTK SDK libs
        if: matrix.use-vtk == 'vtk' && runner.os  == 'Windows'  && steps.cache-vtk-restore.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          set -euo pipefail

          micromamba activate build-ocp

          PATH='/c/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/':$PATH
          cp create_lib.sh $HOME/opt/local/vtk-${{ env.VTK }}

          CONDA_PREFIX_POSIX=$(cygpath -u $CONDA_PREFIX)
          cp $CONDA_PREFIX_POSIX/Lib/site-packages/vtk.libs/*.dll $HOME/opt/local/vtk-${{ env.VTK }}/bin/
          cp $CONDA_PREFIX_POSIX/Lib/site-packages/vtk.py $HOME/opt/local/vtk-${{ env.VTK }}
          cp -r $CONDA_PREFIX_POSIX/Lib/site-packages/vtkmodules $HOME/opt/local/vtk-${{ env.VTK }}

          # Create the lib files needed for compilation
          cd $HOME/opt/local/vtk-${{ env.VTK }}/lib/
          ../create_lib.sh

      - name: (All) Cache VTK build folder
        if: matrix.use-vtk == 'vtk'
        # works on Windows, since github actions replace the '/' with '\'
        id: cache-vtk-save
        uses: actions/cache/save@v4
        with:
          path: |
            ~/opt/local/vtk-${{ env.VTK }}
          key: ${{ steps.cache-vtk-restore.outputs.cache-primary-key }}

      # - - - - - - - - - - - - - - - - - - - - -
      #                OCCT SDK
      # - - - - - - - - - - - - - - - - - - - - -

      - name: (All) Restore OCCT SDK cache
        id: cache-occt-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/opt/local/occt-${{ env.OCCT }}-${{ matrix.use-vtk }}
          key: OCCT-${{ env.OCCT }}-${{ matrix.use-vtk }}-${{ matrix.os }}-

      - name: (All) Download and prepare OCCT SDK
        if: steps.cache-occt-restore.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          set -euo pipefail

          git clone https://github.com/Open-Cascade-SAS/OCCT.git
          cd OCCT
          OCCT=$(echo ${{ env.OCCT }} | tr '.' '_')
          git checkout -b V$OCCT tags/V$OCCT

          patch --posix -p1 < ../patches/occt-${{ env.OCCT }}/0001-cmake-Don-t-try-to-write-to-install-directory.-You-k.patch
          patch --posix -p1 < ../patches/occt-${{ env.OCCT }}/0002-GeomPlate_BuildAveragePlane-BasePlan-Don-t-set-yvect.patch
          patch --posix -p1 < ../patches/occt-${{ env.OCCT }}/0003-BRepFill_Filling-WireFromList-We-can-t-assume-that-a.patch
          patch --posix -p1 < ../patches/occt-${{ env.OCCT }}/0004-BRepFill_Filling-Curve-constraints-confused-by-impli.patch
          patch --posix -p1 < ../patches/occt-${{ env.OCCT }}/0005-BRepFill_Filling-Don-t-even-attempt-to-build-with-em.patch
          patch --posix -p1 < ../patches/occt-${{ env.OCCT }}/0006-BRepOffset_Tool-TryProject-Check-return-of-BRepLib-B.patch
          patch --posix -p1 < ../patches/occt-${{ env.OCCT }}/0007-ChFi3d_Builder-ChFi3d_ComputeCurves-set-tolreached-f.patch
          patch --posix -p1 < ../patches/occt-${{ env.OCCT }}/0008-BRepLib-MakeEdge-Setting-closed-flag-of-generated-ed.patch
          patch --posix -p1 < ../patches/occt-${{ env.OCCT }}/0009-BRepFill_CompatibleWires-segfault.-See-following.patch
          patch --posix -p1 < ../patches/occt-${{ env.OCCT }}/0010-BRepFill_OffsetWire-segfault.-See-following.patch
          patch --posix -p1 < ../patches/occt-${{ env.OCCT }}/0011-ChFiDS_FilSpine-Allow-usage-of-externally-assigned-l.patch
          # disabled due to abi incompatibility
          # patch --posix -p1 < ../patches/occt-${{ env.OCCT }}/0012-Allow-blending-of-faces-less-than-5-degrees.-See-fol.patch
          patch --posix -p1 < ../patches/occt-${{ env.OCCT }}/0013-BRepFill_PipeShell-Fix-segfault-with-line-as-profile.patch
          patch --posix -p1 < ../patches/occt-${{ env.OCCT }}/0015-build-Expand-preprocessor-conditional-on-non-standar.patch
          patch --posix -p1 < ../patches/occt-${{ env.OCCT }}/0016-IntPatch_Intersection-Consider-intersection-of-a-clo.patch
          patch --posix -p1 < ../patches/occt-${{ env.OCCT }}/0017-ChFi3d_Builder-Fix-blend-across-seam.-See-following.patch
          # see https://tracker.dev.opencascade.org/view.php?id=33576 and https://github.com/FreeCAD/FreeCAD/issues/9760
          patch --posix -p1 < ../patches/occt-${{ env.OCCT }}/0018-Fix-0033576-BRepTools_NurbsConvertModification-NewPo.patch
                  
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo vtkCommonTransforms >> src/TKIVtk/EXTERNLIB
            echo vtkCommonMath >> src/TKIVtk/EXTERNLIB
            echo vtkCommonExecutionModel >> src/TKIVtk/EXTERNLIB
            echo vtkCommonDataModel >> src/TKIVtk/EXTERNLIB
            echo vtksys >> src/TKIVtk/EXTERNLIB
          fi

          mkdir -p ~/opt/local/occt-${{ env.OCCT }}-${{ matrix.use-vtk }}

      - name: (Linux, Mac) Compile and install OCCT SDK
        if: runner.os  != 'Windows' && steps.cache-occt-restore.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          set -euo pipefail

          micromamba activate build-ocp
          cd OCCT

          rm -fr build

          if [[ "$RUNNER_OS" == "Linux" ]]; then
            export CXXFLAGS="-D_GLIBCXX_USE_CXX11_ABI=0" # Disables the C++11 ABI features for VTK compatibility
          # else
          #   EXTRAS="-D CMAKE_OSX_DEPLOYMENT_TARGET=\"11.1\" -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++"            
          fi

          if [[ "${{ matrix.use-vtk }}" == "vtk" ]]; then
            env ${{ matrix.env }} cmake -S . -B build  -G Ninja \
              -D CMAKE_INSTALL_PREFIX=$HOME/opt/local/occt-${{ env.OCCT }}-${{ matrix.use-vtk }} \
              \
              -D USE_VTK=ON \
              -D USE_TBB=OFF \
              -D USE_FREEIMAGE=ON \
              -D USE_FREETYPE=ON \
              -D USE_RAPIDJSON=ON \
              -D USE_FFMPEG=OFF \
              \
              -D BUILD_CPP_STANDARD=C++17 \
              -D CMAKE_BUILD_TYPE=Release \
              -D BUILD_RELEASE_DISABLE_EXCEPTIONS=OFF \
              -D BUILD_MODULE_Draw=OFF  \
              -D CMAKE_PREFIX_PATH=$CONDA_PREFIX \
              \
              -D VTK_RENDERING_BACKEND=OpenGL2 \
              -D 3RDPARTY_VTK_INCLUDE_DIR=$HOME/opt/local/vtk-${{ env.VTK }}/include${{ matrix.vtk_suffix }} \
              -D 3RDPARTY_VTK_LIBRARY_DIR=$HOME/opt/local/vtk-${{ env.VTK }}/lib/ \
              -D CMAKE_CXX_STANDARD_LIBRARIES="-lvtkCommonMath-${{ env.VTK_MAJOR }} -lvtkCommonTransforms-${{ env.VTK_MAJOR }} -lvtksys-${{ env.VTK_MAJOR }} -lvtkCommonExecutionModel-${{ env.VTK_MAJOR }} -lvtkCommonDataModel-${{ env.VTK_MAJOR }}"

              # Patch build file to use VTK libraries with "${{ env.VTK_MAJOR }}" suffix
              for l in vtkCommonCore  vtkRenderingCore  vtkRenderingFreeType  vtkFiltersGeneral  vtkInteractionStyle  vtkRenderingOpenGL2; do
                  ${{ matrix.sed_i }} "s/-l$l/-l$l-${{ env.VTK_MAJOR }}/" build/build.ninja
              done
              rm -f build/build.ninja.bak
          else
            env ${{ matrix.env }} cmake -S . -B build  -G Ninja \
              -D CMAKE_INSTALL_PREFIX=$HOME/opt/local/occt-${{ env.OCCT }}-${{ matrix.use-vtk }} \
              \
              -D USE_VTK=OFF \
              -D USE_TBB=OFF \
              -D USE_FREEIMAGE=ON \
              -D USE_FREETYPE=ON \
              -D USE_RAPIDJSON=ON \
              -D USE_FFMPEG=OFF \
              \
              -D BUILD_CPP_STANDARD=C++17 \
              -D CMAKE_BUILD_TYPE=Release \
              -D BUILD_RELEASE_DISABLE_EXCEPTIONS=OFF \
              -D BUILD_MODULE_Draw=OFF \
              -D CMAKE_PREFIX_PATH=$CONDA_PREFIX
          fi

          # Build OCCT
          ninja -C build -j ${{ steps.cpu-count.outputs.cpu_count }}
          ninja -C build install

      - name: (Windows) Compile and install OCCT SDK
        if: runner.os  == 'Windows' && steps.cache-occt-restore.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          call C:\Users\runneradmin\micromamba\condabin\micromamba.bat activate build-ocp 
          cd OCCT

          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          set CC=cl.exe
          set CXX=cl.exe

          if "${{ matrix.use-vtk }}"=="vtk" (
            cmake -S . -B build -G Ninja ^
              -D USE_VTK=ON ^
              -D USE_TBB=OFF ^
              -D USE_FREEIMAGE=ON ^
              -D USE_FREETYPE=ON ^
              -D USE_RAPIDJSON=ON ^
              -D USE_FFMPEG=OFF ^
              ^
              -D Python3_EXECUTABLE=%CONDA_PREFIX%\python.exe ^
              ^
              -D BUILD_CPP_STANDARD=C++17 ^
              -D CMAKE_BUILD_TYPE=Release ^
              -D BUILD_RELEASE_DISABLE_EXCEPTIONS=OFF ^
              -D BUILD_MODULE_Draw=OFF ^
              ^
              -D CMAKE_INSTALL_PREFIX=%USERPROFILE%\opt\local\occt-${{ env.OCCT }}-${{ matrix.use-vtk }} ^
              -D CMAKE_PREFIX_PATH=%CONDA_PREFIX%\Library ^
              ^
              -D VTK_RENDERING_BACKEND=OpenGL2 ^
              -D VTK_DIR=%USERPROFILE%\opt\local\vtk-${{ env.VTK }} ^
              -D 3RDPARTY_VTK_INCLUDE_DIR=%USERPROFILE%\opt\local\vtk-${{ env.VTK }}\include\vtk-${{ env.VTK_MAJOR }} ^
              -D 3RDPARTY_VTK_LIBRARY_DIR=%USERPROFILE%\opt\local\vtk-${{ env.VTK }}\lib ^
              -D 3RDPARTY_VTK_DLL_DIR=%USERPROFILE%\opt\local\vtk-${{ env.VTK }}\bin

          ) else (
            cmake -S . -B build -G Ninja ^
              -D USE_VTK=OFF ^
              -D USE_TBB=OFF ^
              -D USE_FREEIMAGE=ON ^
              -D USE_FREETYPE=ON ^
              -D USE_RAPIDJSON=ON ^
              -D USE_FFMPEG=OFF ^
              ^
              -D Python3_EXECUTABLE=%CONDA_PREFIX%\python.exe ^
              ^
              -D BUILD_CPP_STANDARD=C++17 ^
              -D CMAKE_BUILD_TYPE="Release" ^
              -D BUILD_RELEASE_DISABLE_EXCEPTIONS=OFF ^
              -D BUILD_MODULE_Draw=OFF ^
              ^
              -D CMAKE_INSTALL_PREFIX=%USERPROFILE%\opt\local\occt-${{ env.OCCT }}-${{ matrix.use-vtk }} ^
              -D CMAKE_PREFIX_PATH=%CONDA_PREFIX%\Library
          )

          ninja -C build -j ${{ steps.cpu-count.outputs.cpu_count }}
          ninja -C build install

      - name: (All) Cache OCCT build folder
        id: cache-occt-save
        uses: actions/cache/save@v4
        with:
          path: |
            ~/opt/local/occt-${{ env.OCCT }}-${{ matrix.use-vtk }}
          key: ${{ steps.cache-occt-restore.outputs.cache-primary-key }}

  # ========================================
  # Generate OCP sources
  # ========================================

  sources:
    needs: sdks
    uses: ./.github/workflows/common-setup.yml
    name: Build OCP source on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04", "macos-13", "macos-14", "windows-2019"]
        python-version: ["3.11"]

        include:
          - os: "macos-13"
            sed_i: "gsed -i"
            env: "MACOSX_DEPLOYMENT_TARGET=11.1"
          - os: "macos-14"
            sed_i: "gsed -i"
            env: "MACOSX_DEPLOYMENT_TARGET=11.1"
          - os: "ubuntu-20.04"
            sed_i: "sed -i"
            env: "DUMMY=0"
          - os: "windows-2019"
            sed_i: "sed -i"

    steps:
      # - - - - - - - - - - - - - - - - - - - - -
      # Restore SDKs
      # - - - - - - - - - - - - - - - - - - - - -

      - name: (All) Restore VTK SDK cache
        if: env.PYWRAP == 'true'
        id: cache-vtk-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/opt/local/vtk-${{ env.VTK }}
          key: VTK-${{ env.VTK }}-py${{ matrix.python-version }}-${{ matrix.os }}-

      # Use vtk enabled OCCT SDK here
      - name: (All) Restore OCCT SDK cache
        if: env.PYWRAP == 'true'
        id: cache-occt-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/opt/local/occt-${{ env.OCCT }}-vtk
          key: OCCT-${{ env.OCCT }}-vtk-${{ matrix.os }}-

      # - - - - - - - - - - - - - - - - - - - - -
      # Build OCP sources using pywrap
      # - - - - - - - - - - - - - - - - - - - - -

      - name: (All) Restore OCP source cache
        id: cache-ocp-source-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ./OCP/OCP
          key: OCP-source-${{ env.OCP }}-vtk-${{ matrix.os }}-

      - name: (All) Install Python prerequisites
        if: env.PYWRAP == 'true' && steps.cache-ocp-restore.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          set -euo pipefail

          micromamba activate build-ocp
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            micromamba install -y logzero toml pandas joblib tqdm jinja2 toposort schema click py-lief=0.15.1 python-clang pyparsing
            pip install "pybind11==2.10.*" path  # cannot be installed with micromamba on Py3.12 and Py3.13
          else
            pip install "pybind11==2.10.*" logzero toml pandas joblib path tqdm jinja2 toposort schema click lief==0.15.1 clang==15.0.7 pyparsing
          fi

      - name: (All) Clone OCP
        if: env.PYWRAP == 'true' && steps.cache-ocp-restore.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          set -euo pipefail

          git clone https://github.com/cadquery/OCP.git
          cd OCP
          # use master for the time being
          # git checkout -b V${{ env.OCP }} tags/${{ env.OCP }}
          git submodule update --init

          # TODO: remove if fixed
          ${{ matrix.sed_i }} 's/"7.7.2.1"/"${{ env.OCP }}"/' ocp.toml

          # TODO: remove if fixed
          cd pywrap
          git checkout 6cbeb64e9695703c56bb6309a8351886accdeeb0
          cd ..

      - name: (Linux) Generate OCP source
        if: env.PYWRAP == 'true' && runner.os == 'Linux' && steps.cache-ocp-source-restore.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          set -euo pipefail

          micromamba activate build-ocp
          cd OCP

          cmake -B new -S . -G Ninja -D N_PROC=${{ steps.cpu-count.outputs.cpu_count }} \
              -D VTK_DIR=$HOME/opt/local/vtk-${{ env.VTK }} \
              -D OpenCASCADE_DIR=$HOME/opt/local/occt-${{ env.OCCT }}/lib/cmake/opencascade \
              -D pybind11_DIR=$(python -c "import pybind11; print(pybind11.get_cmake_dir())")

      - name: (Mac) Generate OCP source
        if: env.PYWRAP == 'true' && runner.os == 'macOS' && steps.cache-ocp-source-restore.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          set -euo pipefail

          micromamba activate build-ocp

          cd OCP

          export LDFLAGS="-L$HOME/opt/local/vtk-${{ env.VTK }}/lib"

          env ${{ matrix.env }} cmake -B new -S . -G Ninja -D N_PROC=${{ steps.cpu-count.outputs.cpu_count }} \
              -D VTK_DIR=$HOME/opt/local/vtk-${{ env.VTK }} \
              -D OpenCASCADE_DIR=$HOME/opt/local/occt-${{ env.OCCT }}/lib/cmake/opencascade \
              -D pybind11_DIR=$(python -c "import pybind11; print(pybind11.get_cmake_dir())") \
              -D CMAKE_OSX_SYSROOT=/opt/MacOSX11.3.sdk

      - name: (Windows) Generate OCP source
        if: env.PYWRAP == 'true' && runner.os == 'Windows' && steps.cache-ocp-source-restore.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          call C:\Users\runneradmin\micromamba\condabin\micromamba.bat activate build-ocp
          cd OCP

          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

          set CC=clang.exe
          set CXX=clang.exe

          set pybind11_DIR="%CONDA_PREFIX%\Lib\site-packages\pybind11\share\cmake\pybind11"

          cmake -B new -S . -G Ninja -D N_PROC=${{ steps.cpu-count.outputs.cpu_count }} ^
            -D CMAKE_BUILD_TYPE=Release ^
            VTK_DIR=-D VTK_DIR=%USERPROFILE%\opt\local\vtk-${{ env.VTK }} ^
            -D OpenCASCADE_DIR=%USERPROFILE%\opt\local\occt-${{ env.OCCT }}\cmake ^
            -D pybind11_DIR=%pybind11_DIR% ^
            -D CMAKE_CXX_STANDARD=17 ^
            -D CMAKE_PREFIX_PATH=%CONDA_PREFIX%\Library ^
            -D CMAKE_SHARED_LINKER_FLAGS="-L %USERPROFILE%\opt\local\vtk-${{ env.VTK }}\lib"

      # - - - - - - - - - - - - - - - - - - - - -
      # Download official OCP sources
      # - - - - - - - - - - - - - - - - - - - - -

      - name: (All) Download official OCP source
        if: env.PYWRAP == 'false'
        shell: bash -l {0}
        run: |
          set -euo pipefail

          # TODO

      - name: (All) Cache OCP source folder
        id: cache-ocp-source-save
        uses: actions/cache/save@v4
        with:
          path: |
            ./OCP/OCP
          key: ${{ steps.cache-ocp-source-restore.outputs.cache-primary-key }}

  # ========================================
  # Build OCP
  # ========================================

  # ocp:
  #   name: Build OCP for ${{ matrix.python-version }} on ${{ matrix.os }} with VTK ${{ matrix.use-vtk }}
  #   needs: sources
  #   uses: ./.github/workflows/common-setup.yml
  #   runs-on: ${{ matrix.os }}

  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: ["ubuntu-20.04", "macos-13", "macos-14", "windows-2019"]
  #       python-version: ["3.11"]
  #       use-vtk: ["vtk", "novtk"]

  #       include:
  #         - os: "macos-13"
  #           delocate: delocate
  #           plat: macosx_11_1_x86_64
  #           vtk_libs: ".dylibs/libvtk*.dylib"
  #           vtk_suffix: "/"
  #           vtk_prefix: ""
  #           sed_i: "gsed -i"
  #           module: "OCP.*.so"
  #           env: "MACOSX_DEPLOYMENT_TARGET=11.1"
  #           shells: "bash"
  #         - os: "macos-14"
  #           delocate: delocate
  #           plat: macosx_11_1_arm64
  #           vtk_libs: ".dylibs/libvtk*.dylib"
  #           vtk_suffix: "/"
  #           vtk_prefix: ""
  #           sed_i: "gsed -i"
  #           module: "OCP.*.so"
  #           env: "MACOSX_DEPLOYMENT_TARGET=11.1"
  #           shells: "bash"
  #         - os: "ubuntu-20.04"
  #           delocate: auditwheel patchelf
  #           plat: manylinux_2_31_x86_64
  #           vtk_libs: "libvtk*.so"
  #           vtk_suffix: "/vtk-9.3/"
  #           vtk_prefix: ""
  #           sed_i: "sed -i"
  #           compilers: ""
  #           module: "OCP.*.so"
  #           env: "DUMMY=0"
  #           shells: "bash"
  #         - os: "windows-2019"
  #           delocate: delvewheel
  #           plat: win_amd64
  #           vtk_libs: "vtk*.dll"
  #           vtk_suffix: "/"
  #           vtk_prefix: "Library/"
  #           sed_i: "sed -i"
  #           shells: "bash cmd.exe"
  #           module: "OCP/OCP.*.pyd"

  #     # - - - - - - - - - - - - - - - - - - - - -
  #     # Restore SDKs
  #     # - - - - - - - - - - - - - - - - - - - - -

  #     - name: (All) Restore VTK SDK cache
  #       if: env.PYWRAP == 'true'
  #       id: cache-vtk-restore
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: |
  #           ~/opt/local/vtk-${{ env.VTK }}
  #         key: VTK-${{ env.VTK }}-py${{ matrix.python-version }}-${{ matrix.os }}-

  #     - name: (All) Restore OCCT SDK cache with VTK support
  #       if: env.PYWRAP == 'true'
  #       id: cache-occt-restore
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: |
  #           ~/opt/local/occt-${{ env.OCCT }}-vtk
  #         key: OCCT-${{ env.OCCT }}-vtk-${{ matrix.os }}-

  #     - name: (All) Restore OCCT SDK cache without VTK support
  #       if: env.PYWRAP == 'true'
  #       id: cache-occt-restore
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: |
  #           ~/opt/local/occt-${{ env.OCCT }}-novtk
  #         key: OCCT-${{ env.OCCT }}-novtk-${{ matrix.os }}-

  #     - name: (All) Restore OCP source cache
  #       id: cache-ocp-source-restore
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: |
  #           ./OCP/OCP
  #         key: OCP-source-${{ env.OCP }}-vtk-${{ matrix.os }}-
