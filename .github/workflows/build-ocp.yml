name: OCP with pypi VTK

on: workflow_dispatch

env:
  OCP_ENV: build-ocp
  OCP: 7.7.2.1
  VTK: 9.2.6
  VTK_MAJOR: 9.2
  OCCT: 7.7.2
  OCCT_: 7_7_2

jobs:
  build:
    name: Build with wrapper for Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        # os: ["ubuntu-22.04", "macos-13", "macos-14", "windows-2019"]
        # python-version: ['3.10', '3.11', '3.12']
        os: ["windows-19"]
        python-version: ["3.11"]
        include:
          # - os: "macos-13"
          #   delocate: delocate
          #   plat: macosx_10_9_x86_64
          # - os: "macos-14"
          #   delocate: delocate
          #   plat: macosx_11_0_arm64
          #   vtk_libs: ".dylibs/libvtk*.dylib"
          #   vtk_suffix: "/"
          #   vtk_prefix: ""
          #   sed_i: "sed -i '.bak'"
          #   compilers: "" # use standard macos compilers
          # - os: "ubuntu-22.04"
          #   delocate: auditwheel patchelf
          #   plat: manylinux_2_35_x86_64
          #   vtk_libs: "libvtk*.so"
          #   vtk_suffix: "/vtk-9.2/"
          #   vtk_prefix: ""
          #   sed_i: "sed -i"
          #   compilers: "-D CMAKE_C_COMPILER=/usr/bin/gcc-10 -D CMAKE_CXX_COMPILER=/usr/bin/g++-10 -D CMAKE_PREFIX_PATH=/usr/lib/llvm-15"
          - os: 'windows-2019'
            delocate: delvewheel
            vtk_libs: "vtk*.dll"
            vtk_suffix: "/"
            vtk_prefix: "Library/"
            sed_i: "sed -i"
            compilers: ""


    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }} via micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          log-level: debug
          init-shell: bash
          cache-downloads: true

      - name: Get number of CPUs
        shell: bash -l {0}
        id: cpu-count
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            cpu_count=$(sysctl -n hw.logicalcpu)
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            cpu_count=$(nproc)
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            cpu_count=$NUMBER_OF_PROCESSORS
          else
            cpu_count=1
          fi
          echo "cpu_count=$cpu_count" >> $GITHUB_OUTPUT

          echo "=> Using $cpu_count CPUs"

      # Install toolchain if needed

      - name: (Mac) Install brew dependencies
        if: ${{ runner.os == 'macOS' }}
        shell: bash -l {0}
        run: |
          brew install freeimage rapidjson ninja cmake llvm@15 tree

      - name: (Ubuntu) Install apt dependencies
        if: ${{ runner.os == 'Linux' }}
        shell: bash -l {0}
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build cmake rapidjson-dev libfreeimage-dev llvm-15 clang-15 libclang-15-dev mesa-common-dev libegl1-mesa-dev libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev libxcursor-dev

      - name: (Windows) Install choco dependencies
        if: ${{ runner.os == 'Windows' }}
        shell: bash -l {0}
        run: |
           choco install ninja cmake tree wget

      # ========================================
      #                VTK SDK
      # ========================================

      - name: (All) Create build environment and install VTK ${{ env.VTK }} from pypi
        shell: bash -l {0}
        run: |
          micromamba create -y -n ${{ env.OCP_ENV }} python=${{ matrix.python-version }}
          micromamba activate ${{ env.OCP_ENV }}
          pip install vtk==${{ env.VTK }}

      - name: (All) Restore VTK SDK cache
        id: cache-vtk-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/opt/local/vtk-${{ env.VTK }}
          key: VTK-${{ env.VTK }}-py${{ matrix.python-version }}-${{ matrix.os }}-

      - name: (Linux, Mac) Install VTK SDK
        if: steps.cache-vtk-restore.outputs.cache-hit != 'true' && ${{ runner.os != 'Windows' }}
        shell: bash -l {0}
        run: |
          # Create an environment with conda VTK to get the include files
          micromamba create -y -n vtk python=${{ matrix.python-version }}
          micromamba activate vtk
          micromamba install -y vtk=${{ env.VTK }}

          rm -fr ~/opt/local/vtk-${{ env.VTK }}
          mkdir -p ~/opt/local/vtk-${{ env.VTK }}/include
          mkdir -p ~/opt/local/vtk-${{ env.VTK }}/lib
          mkdir -p ~/opt/local/vtk-${{ env.VTK }}/lib/cmake

          cp -r $CONDA_PREFIX/include/vtk-${{ env.VTK_MAJOR }}/ ~/opt/local/vtk-${{ env.VTK }}/include/
          cp cmake/vtk-config-${{ matrix.os }}.cmake ~/opt/local/vtk-${{ env.VTK }}/lib/cmake/vtk-config.cmake
          micromamba deactivate

          # Create an environment with pypi VTK to get the VTK shared libraries
          micromamba activate ${{ env.OCP_ENV }}

          cp $CONDA_PREFIX/lib/python${{ matrix.python-version }}/site-packages/vtkmodules/${{ matrix.vtk_libs }} ~/opt/local/vtk-${{ env.VTK }}/lib/
          cp $CONDA_PREFIX/lib/python${{ matrix.python-version }}/site-packages/vtk.py ~/opt/local/vtk-${{ env.VTK }}
          cp -r $CONDA_PREFIX/lib/python${{ matrix.python-version }}/site-packages/vtkmodules ~/opt/local/vtk-${{ env.VTK }}

          if [[ "$RUNNER_OS" == "Linux" ]]; then
            # copy libXcursor and libXfixes to the VTK lib folder
            cp $CONDA_PREFIX/lib/python${{ matrix.python-version }}/site-packages/vtk.libs/* ~/opt/local/vtk-${{ env.VTK }}/lib/
          fi

      - name: (Windows) Install VTK SDK
        if: steps.cache-vtk-restore.outputs.cache-hit != 'true' && ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14

      - name: (Windows) Install VTK SDK
        if: steps.cache-vtk-restore.outputs.cache-hit != 'true' && ${{ runner.os == 'Windows' }}
        shell: bash -l {0}
        run: |
          where dumpbin.exe
          where lib.exe
          # Create an environment with conda VTK to get the include files

          micromamba create -y -n vtk python=${{ matrix.python-version }}
          micromamba activate vtk
          micromamba install -y vtk=${{ env.VTK }}

          mkdir $HOME/opt/local/vtk-${{ env.VTK }}/include
          mkdir $HOME/opt/local/vtk-${{ env.VTK }}/bin
          mkdir $HOME/opt/local/vtk-${{ env.VTK }}/lib
          copy create_lib.bat $HOME/opt/local/vtk-${{ env.VTK }}

          cp -r $CONDA_PREFIX/${{ matrix.vtk_prefix }}include/vtk-${{ env.VTK_MAJOR }}/ ~/opt/local/vtk-${{ env.VTK }}/include/
          cp cmake/vtk-config-${{ matrix.os }}.cmake ~/opt/local/vtk-${{ env.VTK }}/vtk-config.cmake
          micromamba deactivate

          # Create an environment with pypi VTK to get the VTK shared libraries
          micromamba activate ${{ env.OCP_ENV }}

          cp $CONDA_PREFIX/Lib/site-packages/vtkmodules/*.dll $HOME/opt/local/vtk-${{ env.VTK }}/bin/
          cp $CONDA_PREFIX/lib/python${{ matrix.python-version }}/site-packages/vtk.py $HOME/opt/local/vtk-${{ env.VTK }}
          cp -r $CONDA_PREFIX/lib/python${{ matrix.python-version }}/site-packages/vtkmodules $HOME/opt/local/vtk-${{ env.VTK }}

          # Create the lib files needed for compilation
          PATH="/c/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/":$PATH
          cd $HOME/opt/local/vtk-${{ env.VTK }}/lib/
          ../create_lib.sh %f

      - name: (All) Cache VTK build folder
        # works on Windows, since github actions replace the '/' with '\'
        id: cache-vtk-save
        uses: actions/cache/save@v4
        with:
          path: |
            ~/opt/local/vtk-${{ env.VTK }}
          key: ${{ steps.cache-vtk-restore.outputs.cache-primary-key }}

      # ========================================
      #                OCCT SDK
      # ========================================

      - name: (All) Restore OCCT SDK cache
        id: cache-occt-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/opt/local/occt-${{ env.OCCT }}
            ~/opt/local/include
            ~/opt/local/lib
          key: OCCT-${{ env.OCCT }}-${{ matrix.os }}-

      - name: (Windows) Prepare needed libraries
        if: steps.cache-occt-restore.outputs.cache-hit != 'true' && ${{ runner.os == 'Windows' }}
        shell: bash -l {0}
        run: |
          micromamba create -n occt python=3.11 -y
          micromamba activate occt

          mkdir $HOME/opt/local/include
          mkdir $HOME/opt/local/bin
          mkdir $HOME/opt/local/lib
          
          CONDA_PREFIX_POSIX=$(cygpath -u $CONDA_PREFIX)

          cp $CONDA_PREFIX_POSIX/Library/bin/deflate.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/deflate.lib $HOME/opt/local/lib
          cp $CONDA_PREFIX_POSIX/Library/include/cdeflate.h $HOME/opt/local/include

          cp $CONDA_PREFIX_POSIX/Library/bin/FreeImage.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/FreeImage.lib $HOME/opt/local/lib
          cp $CONDA_PREFIX_POSIX/Library/include/FreeImage*.h $HOME/opt/local/include

          cp $CONDA_PREFIX_POSIX/Library/bin/freetype.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/freetype.lib $HOME/opt/local/lib
          cp -r $CONDA_PREFIX_POSIX/Library/include/freetype $HOME/opt/local/include
          cp -r $CONDA_PREFIX_POSIX/Library/include/freetype2 $HOME/opt/local/include
          cp $CONDA_PREFIX_POSIX/Library/include/ft2build.h $HOME/opt/local/include

          cp $CONDA_PREFIX_POSIX/Library/bin/jpeg8.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/jpeg.lib $HOME/opt/local/lib
          cp $CONDA_PREFIX_POSIX/Library/include/jpeglib.h $HOME/opt/local/include

          cp $CONDA_PREFIX_POSIX/Library/bin/lcms2.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/lcms2.lib $HOME/opt/local/lib
          cp $CONDA_PREFIX_POSIX/Library/include/lcms2.h $HOME/opt/local/include

          cp $CONDA_PREFIX_POSIX/Library/bin/Lerc.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/Lerc.lib $HOME/opt/local/lib
          cp $CONDA_PREFIX_POSIX/Library/include/Lerc*.h $HOME/opt/local/include

          cp $CONDA_PREFIX_POSIX/Library/bin/liblzma.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/liblzma.lib $HOME/opt/local/lib
          cp $CONDA_PREFIX_POSIX/Library/include/lzma.h $HOME/opt/local/include

          cp $CONDA_PREFIX_POSIX/Library/bin/libpng16.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/libpng16.lib $HOME/opt/local/lib
          cp -r $CONDA_PREFIX_POSIX/Library/include/libpng16 $HOME/opt/local/include

          cp $CONDA_PREFIX_POSIX/Library/bin/libwebp.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/libwebp.lib $HOME/opt/local/lib
          cp $CONDA_PREFIX_POSIX/Library/bin/libwebpmux.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/libwebpmux.lib $HOME/opt/local/lib
          cp $CONDA_PREFIX_POSIX/Library/bin/libsharpyuv.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/libsharpyuv.lib $HOME/opt/local/lib
          cp -r $CONDA_PREFIX_POSIX/Library/include/webp $HOME/opt/local/include

          cp $CONDA_PREFIX_POSIX/Library/bin/Iex.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/Iex.lib $HOME/opt/local/lib
          cp $CONDA_PREFIX_POSIX/Library/bin/IlmThread.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/IlmThread.lib $HOME/opt/local/lib
          cp $CONDA_PREFIX_POSIX/Library/bin/IMath.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/IMath.lib $HOME/opt/local/lib
          cp $CONDA_PREFIX_POSIX/Library/bin/OpenEXR.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/OpenEXR.lib $HOME/opt/local/lib
          cp $CONDA_PREFIX_POSIX/Library/bin/OpenEXRCore.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/OpenEXRCore.lib $HOME/opt/local/lib
          cp -r $CONDA_PREFIX_POSIX/Library/include/OpenEXR $HOME/opt/local/include

          cp $CONDA_PREFIX_POSIX/Library/bin/openjp2.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/openjp2.lib $HOME/opt/local/lib
          cp -r $CONDA_PREFIX_POSIX/Library/include/openjpeg-2.5 $HOME/opt/local/include

          cp $CONDA_PREFIX_POSIX/Library/bin/raw.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/raw.lib $HOME/opt/local/lib
          cp -r $CONDA_PREFIX_POSIX/Library/include/libraw $HOME/opt/local/include

          cp $CONDA_PREFIX_POSIX/Library/bin/tiff.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/tiff.lib $HOME/opt/local/lib
          cp $CONDA_PREFIX_POSIX/Library/include/tiff*.h $HOME/opt/local/include

          cp $CONDA_PREFIX_POSIX/Library/bin/zlib.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/zlib.lib $HOME/opt/local/lib
          cp $CONDA_PREFIX_POSIX/Library/include/zlib.h $HOME/opt/local/include

          cp $CONDA_PREFIX_POSIX/Library/bin/zstd.dll $HOME/opt/local/bin
          cp $CONDA_PREFIX_POSIX/Library/lib/zstd.lib $HOME/opt/local/lib
          cp $CONDA_PREFIX_POSIX/Library/include/zstd*.h $HOME/opt/local/include

          cp -r $CONDA_PREFIX_POSIX/Library/include/rapidjson $HOME/opt/local/include

          micromamba deactivate

      - name: (All) Download and prepare OCCT SDK
        if: steps.cache-occt-restore.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          git clone https://github.com/Open-Cascade-SAS/OCCT.git
          cd OCCT
          git checkout -b V${{ env.OCCT_ }} tags/V${{ env.OCCT_ }}
          if [[ "$RUNNER_OS" == "Linux" ]]; then
              patch -p1 < ../patches/occt-${{ env.OCCT }}/blobfish.patch
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
              patch < ../patches/occt-${{ env.OCCT }}/blobfish.patch
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
              patch -p1 < ../patches/occt-${{ env.OCCT }}/blobfish.patch

          fi

      - name: (Mac) Patch OCCT SDK
        if: steps.cache-occt-restore.outputs.cache-hit != 'true' && matrix.os == 'macos-14'
        shell: bash -l {0}
        run: |
          # Patch one issue that prevents from compiling
          cd OCCT
          ${{ matrix.sed_i }} 's/const char\* aTags/const unsigned char\* aTags/' src/StdPrs/StdPrs_BRepFont.cxx

      - name: (Linux, Mac) Compile and install OCCT SDK
        if: steps.cache-occt-restore.outputs.cache-hit != 'true' && ${{ runner.os != 'Windows' }}
        shell: bash -l {0}
        run: |
          micromamba activate ${{ env.OCP_ENV }}

          mkdir -p ~/opt/local/occt-${{ env.OCCT }}
          mkdir ~/opt/local/include
          mkdir ~/opt/local/lib

          cd OCCT
          rm -fr build

          if [[ "$RUNNER_OS" == "Linux" ]]; then
              # -fabi-version=11: Corresponds to GCC 10.1 and later, which includes CXXABI_1.3.7 needed to link with VTK 9.2.6
              # -D_GLIBCXX_USE_CXX11_ABI=0: Disables the C++11 ABI features for compatibility
              export CXXFLAGS="-fabi-version=11 -D_GLIBCXX_USE_CXX11_ABI=0"
          fi

          ${{ matrix.env_target }} cmake -S . -B build  -G Ninja \
                -D CMAKE_INSTALL_PREFIX=$HOME/opt/local/occt-${{ env.OCCT }} \
                \
                ${{ matrix.compilers }} \
                \
                -D USE_TBB=OFF \
                -D USE_FREEIMAGE=ON \
                -D USE_FREETYPE=ON \
                -D USE_RAPIDJSON=ON \
                -D USE_FFMPEG=OFF \
                \
                -D BUILD_CPP_STANDARD=C++17 \
                -D CMAKE_BUILD_TYPE="Release" \
                -D BUILD_RELEASE_DISABLE_EXCEPTIONS=OFF \
                -D BUILD_MODULE_Draw=OFF \
                \
                -D USE_VTK=ON \
                -D VTK_RENDERING_BACKEND="OpenGL2" \
                -D 3RDPARTY_VTK_INCLUDE_DIR=$HOME/opt/local/vtk-${{ env.VTK }}/include${{ matrix.vtk_suffix }} \
                -D 3RDPARTY_VTK_LIBRARY_DIR=$HOME/opt/local/vtk-${{ env.VTK }}/lib/ \
                -D CMAKE_CXX_STANDARD_LIBRARIES="-lvtkCommonMath-${{ env.VTK_MAJOR }} -lvtkCommonTransforms-${{ env.VTK_MAJOR }} -lvtksys-${{ env.VTK_MAJOR }} -lvtkCommonExecutionModel-${{ env.VTK_MAJOR }} -lvtkCommonDataModel-${{ env.VTK_MAJOR }}"

          # Patch build file to use VTK libraries with "${{ env.VTK_MAJOR }}" suffix
          for l in vtkCommonCore  vtkRenderingCore  vtkRenderingFreeType  vtkFiltersGeneral  vtkInteractionStyle  vtkRenderingOpenGL2; do
              ${{ matrix.sed_i }} "s/-l$l/-l$l-${{ env.VTK_MAJOR }}/" build/build.ninja
          done
          rm -f build/build.ninja.bak

          # Build OCCT
          ninja -C build -j ${{ steps.cpu-count.outputs.cpu_count }}
          ninja -C build install

      - name: (Windows) Compile and install OCCT SDK
        if: steps.cache-occt-restore.outputs.cache-hit != 'true' && ${{ runner.os != 'Windows' }}
        shell: bash -l {0}
        run: |
          micromamba activate ${{ env.OCP_ENV }}
          cd OCCT

          PATH="/c/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools/VC/Tools/MSVC/14.29.30133/bin/Hostx64/x64/":$PATH
          
          # For some reason the linker needs some more libs
          echo vtkCommonTransforms >> src/TKIVtk/EXTERNLIB
          echo vtkCommonMath >> src/TKIVtk/EXTERNLIB
          echo vtkCommonExecutionModel >> src/TKIVtk/EXTERNLIB
          echo vtkCommonDataModel >> src/TKIVtk/EXTERNLIB
          echo vtksys >> src/TKIVtk/EXTERNLIB

          cmake -S . -B build \
            -D USE_TBB=OFF \
            -D USE_FREEIMAGE=ON \
            -D USE_FREETYPE=ON \
            -D USE_RAPIDJSON=ON \
            -D USE_FFMPEG=OFF \
            -D USE_VTK=ON \
            -D VTK_RENDERING_BACKEND="OpenGL2" \
            \
            -D Python3_EXECUTABLE=$CONDA_PREFIX/python.exe \
            \
            -D BUILD_CPP_STANDARD=C++17 \
            -D CMAKE_BUILD_TYPE="Release" \
            -D BUILD_RELEASE_DISABLE_EXCEPTIONS=OFF \
            -D BUILD_MODULE_Draw=OFF \
            -D CMAKE_POSITION_INDEPENDENT_CODE=OFF \
            \
            -D CMAKE_INSTALL_PREFIX=$HOME/opt/local/occt-${{ env.OCCT }} \
            -D CMAKE_PREFIX_PATH=$HOME/opt/local \
            -D CMAKE_LIBRARY_PATH="$HOME/opt/local/lib" \
            -D CMAKE_EXE_LINKER_FLAGS="-LIBPATH:$HOME/opt/local/bin" \
            -D CMAKE_SHARED_LINKER_FLAGS="-LIBPATH:$HOME/opt/local/lib" \
            \
            -D 3RDPARTY_RAPIDJSON_INCLUDE_DIR=$HOME/opt/local/include \
            \
            -D 3RDPARTY_FREEIMAGE_INCLUDE_DIR=$HOME/opt/local/include \
            -D 3RDPARTY_FREEIMAGE_DLL_DIR_freeimage=$HOME/opt/local/bin \
            -D 3RDPARTY_FREEIMAGE_INCLUDE_DIR=$HOME/opt/local/include \
            \
            -D 3RDPARTY_FREETYPE_DLL_DIR=$HOME/opt/local \
            -D 3RDPARTY_FREETYPE_LIBRARY_DIR=$HOME/opt/local \
            -D 3RDPARTY_FREETYPE_INCLUDE_DIR_freetype2=$HOME/opt/local/include/freetype2 \
            -D 3RDPARTY_FREETYPE_INCLUDE_DIR_ft2build=$HOME/opt/local/include/ft2build.h \
            -D FREETYPE_INCLUDE_DIRS=$HOME/opt/local/include/freetype \
            \
            -D VTK_DIR=$HOME/opt/local/vtk-${{ env.VTK }} \
            -D 3RDPARTY_VTK_INCLUDE_DIR=$HOME/opt/local/vtk-9.2.6/include/vtk-${{ env.VTK_MAJOR }} \
            -D 3RDPARTY_VTK_LIBRARY_DIR=$HOME/opt/local/vtk-${{ env.VTK }}/lib \
            -D 3RDPARTY_VTK_DLL_DIR=$HOME/opt/local/vtk-${{ env.VTK }}/bin

          cmake --build build --config Release -j ${{ steps.cpu-count.outputs.cpu_count }}
          cmake --install build

      - name: (All) Cache OCCT build folder
        id: cache-occt-save
        uses: actions/cache/save@v4
        with:
          path: |
            ~/opt/local/occt-${{ env.OCCT }}
            ~/opt/local/include
            ~/opt/local/lib
          key: ${{ steps.cache-occt-restore.outputs.cache-primary-key }}

      # ========================================
      #                  OCP
      # ========================================

      - name: (All) Restore OCP cache
        id: cache-ocp-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ./OCP/build/OCP.*.so
          key: OCP-${{ env.OCP }}-py${{ matrix.python-version }}-${{ matrix.os }}-

      - name: (Mac) Install MacOS SDK
        if: steps.cache-ocp-restore.outputs.cache-hit != 'true' && matrix.os == 'macos-14'
        shell: bash -l {0}
        run: |
          curl -L -O https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz
          sudo tar -xf MacOSX11.3.sdk.tar.xz -C /opt
          sudo mkdir -p /opt/usr/local/
          sudo mkdir /usr/local/include
          sudo ln -s /opt/MacOSX11.3.sdk/usr/include /opt/usr/local/include
          sudo ln -s /opt/MacOSX11.3.sdk/System/Library/Frameworks/OpenGL.framework/Headers /usr/local/include/OpenGL

      - name: (All) Install Python prerequisites
        if: steps.cache-ocp-restore.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          micromamba activate ${{ env.OCP_ENV }}
          pip install "pybind11==2.10.*" logzero toml "numpy==1.26.4" "pandas<2" joblib path tqdm jinja2 toposort schema click lief "clang==15.0.7"

      - name: (All) Clone OCP
        if: steps.cache-ocp-restore.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          git clone https://github.com/cadquery/OCP.git
          cd OCP
          git checkout -b V${{ env.OCP }} tags/${{ env.OCP }}
          git submodule update --init

      - name: (All) Restore OCP source cache
        id: cache-ocp-source-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ./OCP/OCP
          key: OCP-source-${{ env.OCP }}-${{ matrix.os }}-

      - name: (Ubuntu) Generate OCP source
        if: steps.cache-ocp-source-restore.outputs.cache-hit != 'true' && matrix.os == 'ubuntu-22.04'
        shell: bash -l {0}
        run: |
          micromamba activate ${{ env.OCP_ENV }}
          cd OCP
          cmake -B new -S . -G Ninja -D N_PROC=${{ steps.cpu-count.outputs.cpu_count }} \
              ${{ matrix.compilers }} \
              -D VTK_DIR=$HOME/opt/local/vtk-${{ env.VTK }}/lib/cmake \
              -D OpenCASCADE_DIR=$HOME/opt/local/occt-${{ env.OCCT }}/lib/cmake/opencascade \
              -D pybind11_DIR=$(python -c "import pybind11; print(pybind11.get_cmake_dir())")

      - name: (Mac) Generate OCP source
        if: steps.cache-ocp-source-restore.outputs.cache-hit != 'true' && matrix.os == 'macos-14'
        shell: bash -l {0}
        run: |
          micromamba activate ${{ env.OCP_ENV }}
          export PATH="$(brew --prefix)/opt/llvm@15/bin:$PATH"
          export LDFLAGS="-L$(brew --prefix)/opt/llvm@15/lib"
          export CPPFLAGS="-I$(brew --prefix)/opt/llvm@15/include"
          export Clang_DIR=$(brew --prefix)/Cellar/llvm@15/15.0.7/lib/cmake/clang
          export LLVM_DIR=$(brew --prefix)/Cellar/llvm@15/15.0.7/lib/cmake/llvm/
          export CC=$(brew --prefix)/Cellar/llvm@15/15.0.7/bin/clang
          export CXX=$(brew --prefix)/opt/llvm@15/bin/clang++
          export CPATH=$(brew --prefix)/include
          export LDFLAGS="-L$HOME/opt/local/vtk-${{ env.VTK }}/lib"

          cd OCP
          cmake -B new -S . -G Ninja -D N_PROC=${{ steps.cpu-count.outputs.cpu_count }} \
              -D VTK_DIR=$HOME/opt/local/vtk-${{ env.VTK }}/lib/cmake \
              -D OpenCASCADE_DIR=$HOME/opt/local/occt-${{ env.OCCT }}/lib/cmake/opencascade \
              -D pybind11_DIR=$(python -c "import pybind11; print(pybind11.get_cmake_dir())") \
              -D CMAKE_OSX_SYSROOT=/opt/MacOSX11.3.sdk

      - name: (All) Cache OCP source folder
        id: cache-ocp-source-save
        uses: actions/cache/save@v4
        with:
          path: |
            ./OCP/OCP
          key: ${{ steps.cache-ocp-source-restore.outputs.cache-primary-key }}

      - name: (Ubuntu) Generate OCP build files and build OCP
        if: steps.cache-ocp-restore.outputs.cache-hit != 'true' && matrix.os == 'ubuntu-22.04'
        shell: bash -l {0}
        run: |
          micromamba activate ${{ env.OCP_ENV }}

          cd OCP

          export CXXFLAGS="-fabi-version=11 -D_GLIBCXX_USE_CXX11_ABI=0"
          export LDFLAGS="-L$HOME/opt/local/vtk-${{ env.VTK }}/lib"

          cmake -B build -S OCP -G Ninja \
              ${{ matrix.compilers }} \
              \
              -D CMAKE_BUILD_TYPE=Release \
              -D VTK_DIR=$HOME/opt/local/vtk-${{ env.VTK }}/lib/cmake \
              -D OpenCASCADE_DIR=$HOME/opt/local/occt-${{ env.OCCT }}/lib/cmake/opencascade \
              -D pybind11_DIR=$(python -c "import pybind11; print(pybind11.get_cmake_dir())") \
              -D CMAKE_CXX_STANDARD=17 \
              -D CMAKE_SHARED_LINKER_FLAGS="-L $HOME/opt/local/vtk-${{ env.VTK }}/lib" \
              -D CMAKE_BUILD_WITH_INSTALL_RPATH=TRUE

          for l in vtkCommonCore  vtkRenderingCore  vtkRenderingFreeType  vtkFiltersGeneral  vtkInteractionStyle  vtkRenderingOpenGL2; do
              ${{ matrix.sed_i }} "s/-l$l/-l$l-${{ env.VTK_MAJOR }}/" build/build.ninja
          done

          ninja -C build -j ${{ steps.cpu-count.outputs.cpu_count }}

      - name: (Mac) Generate OCP build files and build OCP
        if: steps.cache-ocp-restore.outputs.cache-hit != 'true' && matrix.os == 'macos-14'
        shell: bash -l {0}
        run: |
          micromamba activate ${{ env.OCP_ENV }}
          export PATH="$(brew --prefix)/opt/llvm@15/bin:$PATH"
          export LDFLAGS="-L$(brew --prefix)/opt/llvm@15/lib"
          export CPPFLAGS="-I$(brew --prefix)/opt/llvm@15/include"
          export Clang_DIR=$(brew --prefix)/Cellar/llvm@15/15.0.7/lib/cmake/clang
          export LLVM_DIR=$(brew --prefix)/Cellar/llvm@15/15.0.7/lib/cmake/llvm/
          export CC=$(brew --prefix)/Cellar/llvm@15/15.0.7/bin/clang
          export CXX=$(brew --prefix)/opt/llvm@15/bin/clang++
          export CPATH=$(brew --prefix)/include
          export LDFLAGS="-L$HOME/opt/local/vtk-${{ env.VTK }}/lib"

          cd OCP
          cmake -B build -S OCP -G Ninja \
              -D CMAKE_BUILD_TYPE=Release \
              -D CMAKE_OSX_DEPLOYMENT_TARGET="11.1" \
              -D CMAKE_CXX_FLAGS="-I $(brew --prefix)/include" \
              -D VTK_DIR=$HOME/opt/local/vtk-${{ env.VTK }}/lib/cmake \
              -D OpenCASCADE_DIR=$HOME/opt/local/occt-${{ env.OCCT }}/lib/cmake/opencascade \
              -D pybind11_DIR=$(python -c "import pybind11; print(pybind11.get_cmake_dir())") \
              -D CMAKE_CXX_STANDARD=17 \
              -D CMAKE_OSX_SYSROOT=/opt/MacOSX11.3.sdk

          for l in vtkCommonCore  vtkRenderingCore  vtkRenderingFreeType  vtkFiltersGeneral  vtkInteractionStyle  vtkRenderingOpenGL2; do
              ${{ matrix.sed_i }} "s/-l$l/-l$l-${{ env.VTK_MAJOR }}/" build/build.ninja
          done

          ninja -C build -j ${{ steps.cpu-count.outputs.cpu_count }}

      - name: (All) Cache OCP build folder
        # works on Windows, since github actions replace the '/' with '\'
        id: cache-ocp-save
        uses: actions/cache/save@v4
        with:
          path: |
            ./OCP/build/OCP.*.so
          key: ${{ steps.cache-ocp-restore.outputs.cache-primary-key }}

      # ========================================
      #               OCP wheel
      # ========================================

      - name: (All) Create the cadquery_ocp wheel
        shell: bash -l {0}
        run: |
          micromamba activate ${{ env.OCP_ENV }}
          pip install build wheel ${{ matrix.delocate }}

          cd pypi
          cp ../OCP/build/OCP.*.so .

          mkdir cadquery_ocp
          wget https://raw.githubusercontent.com/CadQuery/OCP/refs/heads/master/LICENSE -O cadquery_ocp/LICENSE

          python -m build -w -n

          PY_VER=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          python -m wheel tags --remove \
                               --platform-tag ${{ matrix.plat }} \
                               --abi-tag $PY_VER \
                               --python-tag $PY_VER \
                               dist/*.whl

          unzip -l dist/cadquery_ocp-*.whl

      - name: (Linux) Delocate the cadquery_ocp wheel
        if: ${{ runner.os == 'Linux' }}
        shell: bash -l {0}
        run: |
          micromamba activate ${{ env.OCP_ENV }}
          cd pypi

          EXCLUDE=$(ls -1  ~/opt/local/vtk-${{ env.VTK }}/lib/ | xargs | sed 's/ / --exclude /g')
          env LD_LIBRARY_PATH=$HOME/opt/local/occt-${{ env.OCCT }}/lib \
              python -m auditwheel \
              repair \
              --plat=${{ matrix.plat }} \
              --exclude $EXCLUDE \
              --wheel-dir=wheel \
              dist/*.whl

          cd wheel
          python -m wheel unpack cadquery_ocp*.whl
          rm cadquery_ocp-*.whl
          patchelf --add-rpath '$ORIGIN/vtk.libs'             cadquery_ocp-${{ env.OCCT }}/OCP.*.so
          patchelf --add-rpath '$ORIGIN/vtkmodules'           cadquery_ocp-${{ env.OCCT }}/OCP.*.so
          patchelf --add-rpath '$ORIGIN/../vtkmodules'        cadquery_ocp-${{ env.OCCT }}/cadquery_ocp.libs/*
          patchelf --add-rpath '$ORIGIN/../cadquery_ocp.libs' cadquery_ocp-${{ env.OCCT }}/cadquery_ocp.libs/*
          python -m wheel pack cadquery_ocp-${{ env.OCCT }}
          cd ..

      - name: (Mac) Delocate the cadquery_ocp wheel
        if: ${{ runner.os == 'macOS' }}
        shell: bash -l {0}
        run: |
          micromamba activate ${{ env.OCP_ENV }}

          cd pypi/dist
          python -m wheel unpack cadquery_ocp*.whl
          rm cadquery_ocp-*.whl
          install_name_tool -delete_rpath $(realpath ~/opt/local/occt-${{ env.OCCT }}/lib) cadquery_ocp-${{ env.OCCT }}/OCP.*.so
          install_name_tool -add_rpath @loader_path/vtkmodules/.dylibs/ cadquery_ocp-${{ env.OCCT }}/OCP.*.so
          python -m wheel pack cadquery_ocp-*
          cd ..

          # env MACOSX_DEPLOYMENT_TARGET=11.1 \
          env DYLD_LIBRARY_PATH=$HOME/opt/local/occt-${{ env.OCCT }}/lib:$HOME/opt/local/vtk-${{ env.VTK }}/lib:$(brew --prefix)/lib \
              python -m delocate.cmd.delocate_wheel \
              -e libvtk \
              --wheel-dir=wheel \
              dist/*.whl

      - name: Upload cadquery_ocp wheel
        uses: actions/upload-artifact@v4
        with:
          name: cadquery-ocp-${{ matrix.os }}-cp${{ matrix.python-version }}
          path: pypi/wheel/*.whl

      # ========================================
      #                 Test
      # ========================================

      - name: Create the test environment
        shell: bash -l {0}
        run: |
          micromamba create -y -n test python=${{ matrix.python-version }}
          micromamba activate test
          pip install pytest docutils ipython

      - name: Install VTK and OCP wheel
        shell: bash -l {0}
        run: |
          micromamba activate test
          pip install vtk==${{ env.VTK }}
          pip install pypi/wheel/*.whl

      - name: Verify OCP
        shell: bash -l {0}
        run: |
          micromamba activate test
          python -c "import OCP; print('Success: OCP', OCP.__version__)"

      - name: Install cadquery
        shell: bash -l {0}
        run: |
          git clone https://github.com/cadquery/cadquery.git
          cd cadquery
          micromamba activate test
          unset CONDA_PREFIX_1
          pip install .

      - name: Run cadquery tests
        shell: bash -l {0}
        run: |
          cd cadquery
          micromamba activate test
          pytest tests -v

      - name: Uninstall test
        shell: bash -l {0}
        run: |
          micromamba activate test
          pip uninstall -y cadquery
          pip uninstall -y cadquery_ocp
          pip uninstall -y cadquery_vtk
