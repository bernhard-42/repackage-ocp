name: Repackage OCP

on:
  workflow_dispatch

env:
  OCP_VERSION: 7.7.2.1
  VTK_ENV: build_cadquery_vtk
  OCP_ENV: build_cadquery_ocp

jobs:
  build:
    name: Build with wrapper for Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # os: ['ubuntu-20.04', 'macos-13', 'macos-14', 'windows-2019']
        # python-version: ['3.10', '3.11', '3.12']
        os: ['ubuntu-22.04', 'macos-13', 'macos-14']
        python-version: ['3.11']
        include:
          - os: 'macos-13'
            vtk_internal_version: 9.2.1
            delocate: delocate
            plat: macosx_10_9_x86_64
          - os: 'macos-14'
            vtk_internal_version: 9.2.1
            delocate: delocate
            plat: macosx_11_0_arm64
          - os: 'ubuntu-22.04'
            vtk_internal_version: 9.2.6
            delocate: auditwheel patchelf
            plat: manylinux_2_35_x86_64
          # - os: 'windows-2019'
          #   vtk_internal_version: 9.2.6
          #   delocate: delvewheel

    steps:

      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }} via micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
            log-level: debug
            init-shell: bash
            cache-downloads: true

      # ==================== cadquery_vtk ====================
    
      - name: Install OCP
        shell: bash -l {0}
        run: |
          micromamba create  -y -n ${{ env.VTK_ENV }} python=${{ matrix.python-version }}
          micromamba activate ${{ env.VTK_ENV }}
          micromamba install -y -c conda-forge -c cadquery ocp=${{ env.OCP_VERSION }} ${{ matrix.delocate }} 
          pip install build

      - name: Copy the VTK artifacts for Ubuntu
        if: ${{ runner.os == 'Linux' }}
        shell: bash -l {0}
        run: |
          micromamba activate ${{ env.VTK_ENV }}
          cd VTK
          cp $CONDA_PREFIX/lib/python${{ matrix.python-version }}/site-packages/vtk.py .
          cp -r $CONDA_PREFIX/lib/python${{ matrix.python-version }}/site-packages/vtkmodules .

      - name: Copy the VTK artifacts for Mac
        if: ${{ runner.os == 'macOS' }}
        shell: bash -l {0}
        run: |
          micromamba activate ${{ env.VTK_ENV }}
          cd VTK
          cp $CONDA_PREFIX/lib/python${{ matrix.python-version }}/site-packages/vtk.py .
          cp -r $CONDA_PREFIX/lib/python${{ matrix.python-version }}/site-packages/vtkmodules .
          mkdir libs
          # copy symlinks with name of the symlink
          for l in $CONDA_PREFIX/lib/libvtk*${{ matrix.vtk_internal_version }}.dylib; do cp -L $l ./libs; done

      - name: Copy the OCP artifacts         
        shell: bash -l {0}
        run: |
          cd OCP
          micromamba activate ${{ env.VTK_ENV }}          
          cp $CONDA_PREFIX/lib/python${{ matrix.python-version }}/site-packages/OCP.cpython-*.so .
      
      - name: Copy license files
        shell: bash -l {0}
        run: |
          mkdir VTK/cadquery_vtk
          mkdir OCP/cadquery_ocp
          wget https://github.com/Kitware/VTK/blob/master/Copyright.txt -O VTK/cadquery_vtk/Copyright.txt
          wget https://github.com/CadQuery/OCP/blob/master/LICENSE -O OCP/cadquery_ocp/LICENSE
          
      - name: Remove FFMPEG support to avoid _iconv error
        if: ${{ runner.os == 'macOS' }}
        shell: bash -l {0}
        run: |
          cd VTK
          rm vtkmodules/vtkIOFFMPEG.so
          sed -i 'bak' 's/from vtkmodules.vtkIOFFMPEG/# from vtkmodules.vtkIOFFMPEG/' vtk.py
          
      - name: Install tree command on macOS
        if: ${{ runner.os == 'macOS' }}
        shell: bash -l {0}
        run: |
          brew install tree

      - name: VTK File tree
        shell: bash -l {0}
        run: |
          tree VTK

      - name: Create the cadquery_vtk wheel
        shell: bash -l {0}
        run: |
          micromamba activate ${{ env.VTK_ENV }}
          cd VTK
          python -m build -n -w
          PY_VER=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          python -m wheel tags --remove \
                               --platform-tag ${{ matrix.plat }} \
                               --abi-tag $PY_VER \
                               --python-tag $PY_VER \
                               dist/*.whl

      - name: Delocate the cadquery_vtk wheel on macOS
        if: ${{ runner.os == 'macOS' }}
        shell: bash -l {0}
        run: |
          micromamba activate ${{ env.VTK_ENV }}
          cd VTK
          # The order in `DYLD_LIBRARY_PATH` is important to get the 9.2.1 libs
          env MACOSX_DEPLOYMENT_TARGET=11.1 \
              DYLD_LIBRARY_PATH=./libs:$CONDA_PREFIX/lib \
              python -m delocate.cmd.delocate_wheel \
              --wheel-dir=wheel \
              dist/*.whl

      - name: Delocate the cadquery_vtk wheel on Linux
        if: ${{ runner.os == 'Linux' }}
        shell: bash -l {0}
        run: |
          micromamba activate ${{ env.VTK_ENV }}
          cd VTK
          env LD_LIBRARY_PATH=$CONDA_PREFIX/lib \
              python -m auditwheel repair \
              --plat=${{ matrix.plat }} \
              --wheel-dir=wheel \
              dist/*.whl

      - name: Add copies of libs to solve symbolic link issues
        if: ${{ runner.os == 'Linux' }}
        shell: bash -l {0}
        run: |
          cd VTK
          mkdir wheel2
          cd wheel2
          python -m wheel unpack ../wheel/cadquery_vtk-9.2.6-cp311-cp311-manylinux_2_35_x86_64.whl
          cd cadquery_vtk-9.2.6/cadquery_vtk.libs/
          cp libvtkWrappingPythonCore3-*.11-9.2.so.9.2.6 libvtkWrappingPythonCore3.11-9.2.so.1
          cp libvtkRenderingCore-9-*.2.so.9.2.6 libvtkRenderingCore-9.2.so.1
          cp libvtkCommonDataModel-9-*.2.so.9.2.6 libvtkCommonDataModel-9.2.so.1
          cp libvtkCommonCore-9-*.2.so.9.2.6 libvtkCommonCore-9.2.so.1
          cp libvtksys-9-*.2.so.9.2.6 libvtksys-9.2.so.1
          cd ../..
          python -m wheel pack cadquery_vtk-9.2.6/

      # ==================== cadquery_ocp ====================

      - name: Create the OCP environment
        shell: bash -l {0}
        run: |
          micromamba create -y -n ${{ env.OCP_ENV }} python=${{ matrix.python-version }} -y
          micromamba activate ${{ env.OCP_ENV }}
          micromamba install -y ${{ matrix.delocate }}
          pip install build

      - name: Install and verify the VTK wheel
        shell: bash -l {0}
        run: |
          micromamba activate ${{ env.OCP_ENV }}
          pip install VTK/wheel2/*.whl

          python -c "import vtk; print('Success: VTK', vtk.vtkVersion().GetVTKVersion())"
        
      - name: Patch the vtkmodules path into the OCP library on macOS
        if: ${{ runner.os == 'macOS' }}
        shell: bash -l {0}
        run: |
          cd OCP
          install_name_tool -add_rpath @loader_path/vtkmodules/.dylibs OCP.*.so
          codesign --force --sign - OCP.*.so

      - name: Patch the vtkmodules path into the OCP library on Linux
        if: ${{ runner.os == 'Linux' }}
        shell: bash -l {0}
        run: |
          cd OCP
          patchelf --add-rpath '$ORIGIN/cadquery_vtk.libs' OCP.cpython-311-x86_64-linux-gnu.so

      - name: OCP File tree
        shell: bash -l {0}
        run: |
          tree OCP
          
      - name: Create the cadquery_ocp wheel
        shell: bash -l {0}
        run: |
          cd OCP
          micromamba activate ${{ env.OCP_ENV }}
          python -m build -w -n
          PY_VER=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          python -m wheel tags --remove \
                               --platform-tag ${{ matrix.plat }} \
                               --abi-tag $PY_VER \
                               --python-tag $PY_VER \
                               dist/*.whl

      - name:   Delocate the cadquery_ocp wheel on macOS
        if: ${{ runner.os == 'macOS' }}
        shell: bash -l {0}
        run: |
          cd OCP
          micromamba activate ${{ env.OCP_ENV }}
          
          # order in `DYLD_LIBRARY_PATH` is important
          env MACOSX_DEPLOYMENT_TARGET=11.1 \
              DYLD_LIBRARY_PATH=$CONDA_PREFIX/lib:$CONDA_PREFIX/../${{ env.VTK_ENV }}/lib \
              python -m delocate.cmd.delocate_wheel \
              -e libvtk \
              --wheel-dir=wheel \
              dist/*.whl

      - name:   Delocate the cadquery_ocp wheel on Linux
        if: ${{ runner.os == 'Linux' }}
        shell: bash -l {0}
        run: |
          cd OCP
          micromamba activate ${{ env.OCP_ENV }}
          EXCLUDE=$(auditwheel lddtree OCP.cpython-311-x86_64-linux-gnu.so 2>&1 | egrep 'libvtk.*",' | tr -d '",' | xargs | sed 's/ / --exclude /g')
          echo $EXCLUDE
          env LD_LIBRARY_PATH=$CONDA_PREFIX/lib:$CONDA_PREFIX/../${{ env.VTK_ENV }}/lib \
              python -m auditwheel \
              repair \
              --exclude $EXCLUDE \
              --plat=${{ matrix.plat }} \
              --wheel-dir=wheel \
              dist/*.whl

      # ==================== test ====================

      - name: Create the test environment
        shell: bash -l {0}
        run: |
          micromamba create -y -n test python=${{ matrix.python-version }}
          micromamba activate test
          pip install pytest docutils ipython
          
      - name: Install VTK and OCP wheel
        shell: bash -l {0}
        run: |
          micromamba activate test
          pip install VTK/wheel/*.whl
          pip install OCP/wheel/*.whl

      - name: Verify OCP
        shell: bash -l {0}
        run: |
          micromamba activate test
          python -c "import OCP; print('Success: OCP', OCP.__version__)"

      - name: Install cadquery
        shell: bash -l {0}
        run: |
          git clone https://github.com/cadquery/cadquery.git
          cd cadquery
          micromamba activate test
          unset CONDA_PREFIX_1
          pip install .

      - name: Run cadquery tests
        shell: bash -l {0}
        run: |
          cd cadquery
          micromamba activate test
          pytest tests

      - name: Uninstall test
        shell: bash -l {0}
        run: |
          micromamba activate test
          pip uninstall -y cadquery
          pip uninstall -y cadquery_ocp
          pip uninstall -y cadquery_vtk

      # ==================== upload artifacts ====================

      - name: Upload cadquery_vtk wheel
        uses: actions/upload-artifact@v4
        with:
          name: cadquery-vtk-${{ matrix.os }}-cp${{ matrix.python-version }}
          path: VTK/wheel/*.whl      

      - name: Upload cadquery_ocp wheel
        uses: actions/upload-artifact@v4
        with:
          name: cadquery-ocp-${{ matrix.os }}-cp${{ matrix.python-version }}
          path: OCP/wheel/*.whl      